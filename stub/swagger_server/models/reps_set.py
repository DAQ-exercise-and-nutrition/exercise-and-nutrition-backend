# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RepsSet(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, reps_id: int=None, goal: str=None, sets: int=None, reps: int=None, weight_lifting: str=None, rest: int=None, stretching: int=None):  # noqa: E501
        """RepsSet - a model defined in Swagger

        :param reps_id: The reps_id of this RepsSet.  # noqa: E501
        :type reps_id: int
        :param goal: The goal of this RepsSet.  # noqa: E501
        :type goal: str
        :param sets: The sets of this RepsSet.  # noqa: E501
        :type sets: int
        :param reps: The reps of this RepsSet.  # noqa: E501
        :type reps: int
        :param weight_lifting: The weight_lifting of this RepsSet.  # noqa: E501
        :type weight_lifting: str
        :param rest: The rest of this RepsSet.  # noqa: E501
        :type rest: int
        :param stretching: The stretching of this RepsSet.  # noqa: E501
        :type stretching: int
        """
        self.swagger_types = {
            'reps_id': int,
            'goal': str,
            'sets': int,
            'reps': int,
            'weight_lifting': str,
            'rest': int,
            'stretching': int
        }

        self.attribute_map = {
            'reps_id': 'reps_id',
            'goal': 'goal',
            'sets': 'sets',
            'reps': 'reps',
            'weight_lifting': 'weight_lifting',
            'rest': 'rest',
            'stretching': 'stretching'
        }
        self._reps_id = reps_id
        self._goal = goal
        self._sets = sets
        self._reps = reps
        self._weight_lifting = weight_lifting
        self._rest = rest
        self._stretching = stretching

    @classmethod
    def from_dict(cls, dikt) -> 'RepsSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Reps_set of this RepsSet.  # noqa: E501
        :rtype: RepsSet
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reps_id(self) -> int:
        """Gets the reps_id of this RepsSet.


        :return: The reps_id of this RepsSet.
        :rtype: int
        """
        return self._reps_id

    @reps_id.setter
    def reps_id(self, reps_id: int):
        """Sets the reps_id of this RepsSet.


        :param reps_id: The reps_id of this RepsSet.
        :type reps_id: int
        """

        self._reps_id = reps_id

    @property
    def goal(self) -> str:
        """Gets the goal of this RepsSet.


        :return: The goal of this RepsSet.
        :rtype: str
        """
        return self._goal

    @goal.setter
    def goal(self, goal: str):
        """Sets the goal of this RepsSet.


        :param goal: The goal of this RepsSet.
        :type goal: str
        """

        self._goal = goal

    @property
    def sets(self) -> int:
        """Gets the sets of this RepsSet.


        :return: The sets of this RepsSet.
        :rtype: int
        """
        return self._sets

    @sets.setter
    def sets(self, sets: int):
        """Sets the sets of this RepsSet.


        :param sets: The sets of this RepsSet.
        :type sets: int
        """

        self._sets = sets

    @property
    def reps(self) -> int:
        """Gets the reps of this RepsSet.


        :return: The reps of this RepsSet.
        :rtype: int
        """
        return self._reps

    @reps.setter
    def reps(self, reps: int):
        """Sets the reps of this RepsSet.


        :param reps: The reps of this RepsSet.
        :type reps: int
        """

        self._reps = reps

    @property
    def weight_lifting(self) -> str:
        """Gets the weight_lifting of this RepsSet.


        :return: The weight_lifting of this RepsSet.
        :rtype: str
        """
        return self._weight_lifting

    @weight_lifting.setter
    def weight_lifting(self, weight_lifting: str):
        """Sets the weight_lifting of this RepsSet.


        :param weight_lifting: The weight_lifting of this RepsSet.
        :type weight_lifting: str
        """

        self._weight_lifting = weight_lifting

    @property
    def rest(self) -> int:
        """Gets the rest of this RepsSet.


        :return: The rest of this RepsSet.
        :rtype: int
        """
        return self._rest

    @rest.setter
    def rest(self, rest: int):
        """Sets the rest of this RepsSet.


        :param rest: The rest of this RepsSet.
        :type rest: int
        """

        self._rest = rest

    @property
    def stretching(self) -> int:
        """Gets the stretching of this RepsSet.


        :return: The stretching of this RepsSet.
        :rtype: int
        """
        return self._stretching

    @stretching.setter
    def stretching(self, stretching: int):
        """Sets the stretching of this RepsSet.


        :param stretching: The stretching of this RepsSet.
        :type stretching: int
        """

        self._stretching = stretching
