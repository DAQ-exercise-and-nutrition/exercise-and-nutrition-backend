# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_id: str=None, ts: str=None, name: str=None, gender: str=None, age: int=None, weight: float=None, height: float=None, level: str=None, goal: str=None, target: str=None):  # noqa: E501
        """User - a model defined in Swagger

        :param user_id: The user_id of this User.  # noqa: E501
        :type user_id: str
        :param ts: The ts of this User.  # noqa: E501
        :type ts: str
        :param name: The name of this User.  # noqa: E501
        :type name: str
        :param gender: The gender of this User.  # noqa: E501
        :type gender: str
        :param age: The age of this User.  # noqa: E501
        :type age: int
        :param weight: The weight of this User.  # noqa: E501
        :type weight: float
        :param height: The height of this User.  # noqa: E501
        :type height: float
        :param level: The level of this User.  # noqa: E501
        :type level: str
        :param goal: The goal of this User.  # noqa: E501
        :type goal: str
        :param target: The target of this User.  # noqa: E501
        :type target: str
        """
        self.swagger_types = {
            'user_id': str,
            'ts': str,
            'name': str,
            'gender': str,
            'age': int,
            'weight': float,
            'height': float,
            'level': str,
            'goal': str,
            'target': str
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'ts': 'ts',
            'name': 'name',
            'gender': 'gender',
            'age': 'age',
            'weight': 'weight',
            'height': 'height',
            'level': 'level',
            'goal': 'goal',
            'target': 'target'
        }
        self._user_id = user_id
        self._ts = ts
        self._name = name
        self._gender = gender
        self._age = age
        self._weight = weight
        self._height = height
        self._level = level
        self._goal = goal
        self._target = target

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> str:
        """Gets the user_id of this User.


        :return: The user_id of this User.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this User.


        :param user_id: The user_id of this User.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def ts(self) -> str:
        """Gets the ts of this User.


        :return: The ts of this User.
        :rtype: str
        """
        return self._ts

    @ts.setter
    def ts(self, ts: str):
        """Sets the ts of this User.


        :param ts: The ts of this User.
        :type ts: str
        """

        self._ts = ts

    @property
    def name(self) -> str:
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def gender(self) -> str:
        """Gets the gender of this User.


        :return: The gender of this User.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """Sets the gender of this User.


        :param gender: The gender of this User.
        :type gender: str
        """

        self._gender = gender

    @property
    def age(self) -> int:
        """Gets the age of this User.


        :return: The age of this User.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age: int):
        """Sets the age of this User.


        :param age: The age of this User.
        :type age: int
        """

        self._age = age

    @property
    def weight(self) -> float:
        """Gets the weight of this User.


        :return: The weight of this User.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight: float):
        """Sets the weight of this User.


        :param weight: The weight of this User.
        :type weight: float
        """

        self._weight = weight

    @property
    def height(self) -> float:
        """Gets the height of this User.


        :return: The height of this User.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height: float):
        """Sets the height of this User.


        :param height: The height of this User.
        :type height: float
        """

        self._height = height

    @property
    def level(self) -> str:
        """Gets the level of this User.


        :return: The level of this User.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level: str):
        """Sets the level of this User.


        :param level: The level of this User.
        :type level: str
        """

        self._level = level

    @property
    def goal(self) -> str:
        """Gets the goal of this User.


        :return: The goal of this User.
        :rtype: str
        """
        return self._goal

    @goal.setter
    def goal(self, goal: str):
        """Sets the goal of this User.


        :param goal: The goal of this User.
        :type goal: str
        """

        self._goal = goal

    @property
    def target(self) -> str:
        """Gets the target of this User.


        :return: The target of this User.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target: str):
        """Sets the target of this User.


        :param target: The target of this User.
        :type target: str
        """

        self._target = target
