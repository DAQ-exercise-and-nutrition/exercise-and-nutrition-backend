# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Food(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, diet: str=None, meal_type: str=None, cal: float=None, fat: float=None, carb: float=None, protein: float=None):  # noqa: E501
        """Food - a model defined in Swagger

        :param name: The name of this Food.  # noqa: E501
        :type name: str
        :param diet: The diet of this Food.  # noqa: E501
        :type diet: str
        :param meal_type: The meal_type of this Food.  # noqa: E501
        :type meal_type: str
        :param cal: The cal of this Food.  # noqa: E501
        :type cal: float
        :param fat: The fat of this Food.  # noqa: E501
        :type fat: float
        :param carb: The carb of this Food.  # noqa: E501
        :type carb: float
        :param protein: The protein of this Food.  # noqa: E501
        :type protein: float
        """
        self.swagger_types = {
            'name': str,
            'diet': str,
            'meal_type': str,
            'cal': float,
            'fat': float,
            'carb': float,
            'protein': float
        }

        self.attribute_map = {
            'name': 'name',
            'diet': 'diet',
            'meal_type': 'meal_type',
            'cal': 'cal',
            'fat': 'fat',
            'carb': 'carb',
            'protein': 'protein'
        }
        self._name = name
        self._diet = diet
        self._meal_type = meal_type
        self._cal = cal
        self._fat = fat
        self._carb = carb
        self._protein = protein

    @classmethod
    def from_dict(cls, dikt) -> 'Food':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Food of this Food.  # noqa: E501
        :rtype: Food
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Food.


        :return: The name of this Food.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Food.


        :param name: The name of this Food.
        :type name: str
        """

        self._name = name

    @property
    def diet(self) -> str:
        """Gets the diet of this Food.


        :return: The diet of this Food.
        :rtype: str
        """
        return self._diet

    @diet.setter
    def diet(self, diet: str):
        """Sets the diet of this Food.


        :param diet: The diet of this Food.
        :type diet: str
        """

        self._diet = diet

    @property
    def meal_type(self) -> str:
        """Gets the meal_type of this Food.


        :return: The meal_type of this Food.
        :rtype: str
        """
        return self._meal_type

    @meal_type.setter
    def meal_type(self, meal_type: str):
        """Sets the meal_type of this Food.


        :param meal_type: The meal_type of this Food.
        :type meal_type: str
        """

        self._meal_type = meal_type

    @property
    def cal(self) -> float:
        """Gets the cal of this Food.


        :return: The cal of this Food.
        :rtype: float
        """
        return self._cal

    @cal.setter
    def cal(self, cal: float):
        """Sets the cal of this Food.


        :param cal: The cal of this Food.
        :type cal: float
        """

        self._cal = cal

    @property
    def fat(self) -> float:
        """Gets the fat of this Food.


        :return: The fat of this Food.
        :rtype: float
        """
        return self._fat

    @fat.setter
    def fat(self, fat: float):
        """Sets the fat of this Food.


        :param fat: The fat of this Food.
        :type fat: float
        """

        self._fat = fat

    @property
    def carb(self) -> float:
        """Gets the carb of this Food.


        :return: The carb of this Food.
        :rtype: float
        """
        return self._carb

    @carb.setter
    def carb(self, carb: float):
        """Sets the carb of this Food.


        :param carb: The carb of this Food.
        :type carb: float
        """

        self._carb = carb

    @property
    def protein(self) -> float:
        """Gets the protein of this Food.


        :return: The protein of this Food.
        :rtype: float
        """
        return self._protein

    @protein.setter
    def protein(self, protein: float):
        """Sets the protein of this Food.


        :param protein: The protein of this Food.
        :type protein: float
        """

        self._protein = protein
